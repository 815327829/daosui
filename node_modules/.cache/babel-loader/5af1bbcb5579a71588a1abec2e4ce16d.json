{"remainingRequest":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\babel-loader\\lib\\index.js!E:\\0Allprj\\05daosui\\daosuimannager\\src\\utils\\request.js","dependencies":[{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\src\\utils\\request.js","mtime":1713345242744},{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1712018435553},{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\babel-loader\\lib\\index.js","mtime":1712018443685}],"contextDependencies":[],"result":["// src/utils/http.js\nimport axios from 'axios'; // 创建 axios 实例\n\nvar service = axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  // API 基础地址，从环境变量中获取\n  timeout: 5000 // 请求超时时间\n\n}); // 请求拦截器\n\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么，例如加入 token\n  // config.headers['Authorization'] = getToken();\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  console.log(error); // for debug\n\n  return Promise.reject(error);\n}); // 响应拦截器\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data; // 根据实际项目调整，处理正常响应和异常\n\n  return res;\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["E:\\0Allprj\\05daosui\\daosuimannager\\src\\utils\\request.js"],"names":["axios","service","create","baseURL","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","data"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,sCADmB;AACqB;AACjDC,EAAAA,OAAO,EAAE,IAFmB,CAEb;;AAFa,CAAb,CAAhB,C,CAKA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACC,UAAAC,MAAM,EAAI;AACT;AACA;AACA,SAAOA,MAAP;AACA,CALF,EAMC,UAAAC,KAAK,EAAI;AACR;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFQ,CAEY;;AACpB,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACA,CAVF,E,CAaA;;AACAR,OAAO,CAACI,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B,CACC,UAAAO,QAAQ,EAAI;AACX,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB,CADW,CAEX;;AACA,SAAOD,GAAP;AACA,CALF,EAMC,UAAAN,KAAK,EAAI;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADQ,CACoB;;AAC5B,SAAOG,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACA,CATF;AAYA,eAAeR,OAAf","sourcesContent":["// src/utils/http.js\r\nimport axios from 'axios';\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n\tbaseURL: \"https://jsonplaceholder.typicode.com\", // API 基础地址，从环境变量中获取\r\n\ttimeout: 5000, // 请求超时时间\r\n});\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n\tconfig => {\r\n\t\t// 在发送请求之前做些什么，例如加入 token\r\n\t\t// config.headers['Authorization'] = getToken();\r\n\t\treturn config;\r\n\t},\r\n\terror => {\r\n\t\t// 对请求错误做些什么\r\n\t\tconsole.log(error); // for debug\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n\tresponse => {\r\n\t\tconst res = response.data;\r\n\t\t// 根据实际项目调整，处理正常响应和异常\r\n\t\treturn res;\r\n\t},\r\n\terror => {\r\n\t\tconsole.log('err' + error); // for debug\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n\r\nexport default service;"]}]}