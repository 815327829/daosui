{"remainingRequest":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\babel-loader\\lib\\index.js!E:\\0Allprj\\05daosui\\daosuimannager\\src\\utils\\request.js","dependencies":[{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\src\\utils\\request.js","mtime":1713345242744},{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\babel.config.js","mtime":1712018446964},{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1714285628361},{"path":"E:\\0Allprj\\05daosui\\daosuimannager\\node_modules\\babel-loader\\lib\\index.js","mtime":1714285631484}],"contextDependencies":[],"result":["// src/utils/http.js\nimport axios from 'axios';\n\n// 创建 axios 实例\nvar service = axios.create({\n  baseURL: \"https://jsonplaceholder.typicode.com\",\n  // API 基础地址，从环境变量中获取\n  timeout: 5000 // 请求超时时间\n});\n\n// 请求拦截器\nservice.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么，例如加入 token\n  // config.headers['Authorization'] = getToken();\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  console.log(error); // for debug\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n  // 根据实际项目调整，处理正常响应和异常\n  return res;\n}, function (error) {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"names":["axios","service","create","baseURL","timeout","interceptors","request","use","config","error","console","log","Promise","reject","response","res","data"],"sources":["E:/0Allprj/05daosui/daosuimannager/src/utils/request.js"],"sourcesContent":["// src/utils/http.js\r\nimport axios from 'axios';\r\n\r\n// 创建 axios 实例\r\nconst service = axios.create({\r\n\tbaseURL: \"https://jsonplaceholder.typicode.com\", // API 基础地址，从环境变量中获取\r\n\ttimeout: 5000, // 请求超时时间\r\n});\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n\tconfig => {\r\n\t\t// 在发送请求之前做些什么，例如加入 token\r\n\t\t// config.headers['Authorization'] = getToken();\r\n\t\treturn config;\r\n\t},\r\n\terror => {\r\n\t\t// 对请求错误做些什么\r\n\t\tconsole.log(error); // for debug\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n\tresponse => {\r\n\t\tconst res = response.data;\r\n\t\t// 根据实际项目调整，处理正常响应和异常\r\n\t\treturn res;\r\n\t},\r\n\terror => {\r\n\t\tconsole.log('err' + error); // for debug\r\n\t\treturn Promise.reject(error);\r\n\t}\r\n);\r\n\r\nexport default service;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC5BC,OAAO,EAAE,sCAAsC;EAAE;EACjDC,OAAO,EAAE,IAAI,CAAE;AAChB,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/B,UAAAC,MAAM,EAAI;EACT;EACA;EACA,OAAOA,MAAM;AACd,CAAC,EACD,UAAAC,KAAK,EAAI;EACR;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC,CAAC;EACpB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC7B,CACD,CAAC;;AAED;AACAR,OAAO,CAACI,YAAY,CAACS,QAAQ,CAACP,GAAG,CAChC,UAAAO,QAAQ,EAAI;EACX,IAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA,OAAOD,GAAG;AACX,CAAC,EACD,UAAAN,KAAK,EAAI;EACRC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC;EAC5B,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAC7B,CACD,CAAC;AAED,eAAeR,OAAO","ignoreList":[]}]}